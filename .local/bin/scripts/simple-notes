#!/bin/python

# A python script for managing daily notes.
# Usage: simple-notes []

import csv
from os import path
import argparse
from datetime import datetime

config_dir           = "/home/adrian/.config/simple-notes/"
punctual_events_file = "punctual_events.csv"
cyclic_events_file   = "cyclic_events.csv"

# --------------------------------------
#                 Utils
# --------------------------------------

# Get options
def get_options():
    with open(config_dir + "config.csv", "r", newline='') as csvfile:
        spamreader = csv.reader(csvfile)
        options = spamreader.__next__()
    return options

# Get punctual events of some date
def get_punctual_events():
    pass

# Get cyclic events
def get_cyclic_events():
    pass


# --------------------------------------
#                  API
# --------------------------------------

# Get the name of the daily note and init it if does not exist
def get_daily_note():
    # Get options
    notes_dir, profile = get_options()
    today              = datetime.now()

    # Get note name
    note_path = notes_dir + "/" + str(today.date()) + ".md"

    # Create note if does not exist
    base_date    = datetime(1900, 1, 1)
    today_number = (today - base_date).days

    if not path.isfile(note_path):
        # Get template
        template_path = config_dir + profile + "/" + str(today.weekday()) + ".md"

        with open(template_path, 'r') as f:
            note_content = f.read()
        pass

        note_content = "\n# Schedule (" + str(73 - today_number + 45899) + ")\n\n" + note_content
        today_events = []

        # Get cyclic events
        with open(config_dir + '/' + cyclic_events_file, 'r') as f:
            spamreader = csv.reader(f)
            for row in spamreader:
                modulus = int(row[0])
                coset   = int(row[1])
                event   = row[2]

                today_coset = today_number % modulus

                if today_coset == coset:
                    today_events.append(event)

        # Get punctual events
        with open(config_dir + '/' + punctual_events_file, 'r') as f:
            not_today_events = []

            spamreader = csv.reader(f)
            for row in spamreader:
                event_date = row[0]
                event      = row[1]

                if str(today.date()) == event_date:
                    today_events.append(event)
                elif str(today.date()) > event_date:
                    if event_date == "":
                        today_events.append(event.lstrip())
                    else:
                        today_events.append(event_date + ": " + event.lstrip())
                else:
                    not_today_events.append(row)

        # Update punctual events
        with open(config_dir + '/' + punctual_events_file, 'w') as f:
            spamwriter = csv.writer(f)
            for row in not_today_events:
                spamwriter.writerow(row)

        # Add today s events list to string template
        if len(today_events) != 0:
            #events_content = "# Events\n"
            events_content = ""
            for event in today_events:
                events_content = events_content + "\t- [ ] " + event.lstrip() + "\n"

            #events_content = events_content + "\n"
            note_content = events_content + note_content

        # Add daily notes section
        note_content = note_content + "\n# Daily notes\n- "

        with open(note_path, 'w') as f:
            f.write(note_content)

    return note_path

def get_calendar():
    pass

def set_profile(profile):
    notes_dir, _ = get_options()

    with open(config_dir + "config.csv", 'w') as f:
        f.write(notes_dir + "," + profile)

def add_punctual_event(date, event):
    with open(config_dir + "/" + punctual_events_file, 'a') as f:
        f.write(date + "," + event + "\n")

def add_cyclic_event(modulus, coset, event):
    with open(config_dir + cyclic_events_file, 'a') as f:
        f.write(modulus + "," + coset + "," + event + "\n")


# --------------------------------------
#                 Main
# --------------------------------------

# Parse options
parser = argparse.ArgumentParser(
                    prog='simple-notes',
                    description='Manage daily notes',
                    epilog='')
parser.add_argument("action", choices=["set", "get"], nargs=1)
parser.add_argument("parameters", nargs="*")

args = parser.parse_args()

if args.action[0] == "get":
    if len(args.parameters) != 1:
        print("Invalid option format")
    else:
        match args.parameters[0]:
            case "profile":
                print(get_options()[1])
            case "dir":
                print(get_options()[0])
            case "note":
                print(get_daily_note())
            case _:
                print("Invalid get option")
else:
    if len(args.parameters) < 2:
        print("Invalid option format")
    else:
        option  = args.parameters[0]

        match args.parameters[0]:
            case "profile":
                set_profile(args.parameters[1])
            case "punctual":
                add_punctual_event(args.parameters[1], args.parameters[2])
            case "cyclic":
                add_cyclic_event(args.parameters[1], args.parameters[2], args.parameters[3])
            case _:
                print("Invalid set option")
